IoC와 AOP를 지원하는 경량의 컨테이너 프레임워크

"IoC"
Inversion of Control
제어의 역행
 ex) 서블릿 컨테이너와 doGet()메서드 수행
	메서드를 수행하려면,
	객체가 있어야함! => 서블릿 컨테이너==톰캣
	클래스를 정의 우선
스프링 컨테이너에게 객체 생성 및 관리를 맡김

1. 서블릿 컨테이너 구동시 web.xml을 확인
2. 브라우저가 hello.do 요청
3. 등록한 서블릿 클래스를 객체화하고 doGet()메서드 호출
4. doGet()메서드 수행결과를 브라우저로 응답

장점: 개발자가 객체 생성을 스스로 판단하고 직접작성 및 관리
	-> 컨테이너가 객체 생성 및 관리를 하기때문에 "결합도가 낮아짐"
"유지보수" == 결합도가 낮고 응집도가 높은 코드 

결합도를 낮추는 방법
1. 설계: 다형성
2. 디자인 패턴: Factory
		클라이언트가 사용하고자하는 객체 생성부분을 캡슐화
		클라이언트 소스코드 수정이 줄어듦

1. 클라이언트가 어플리케이션 사용시 스프링설정파일(==applicationContext.xml)이 구동
2. <bean>등록된 객체들 생성
3. 사용자가 이용할 객체를 이름으로 요청(==LookUp) 
4. 해당 객체 반환

<bean> 필수속성 class, id
<bean> 객체생성하는 방식 == 즉시 로딩(pre-loading)
 -> 객체를 사용할때에 생성하는 방식으로 변경

"싱글톤 패턴"을 유지시켜야한다
 : 하나의 객체를 여러번 재사용하는 상황
	안지켜지는 이유 -> 개발자의 실수
	-> 컨테이너에게 싱글톤 패턴유지를 맡겨야함!


[의존성 관리 및 주입]
	DI
	Dependency Injection
 1. 생성자 주입
 2. setter 주입
	=> 객체를 생성할때 활용되는 것들
class Student{
	String name;
	1. 생성자의 인자로 name을 받아서 stu객체 생성하는 방법
	2. 기본생성자로 stu객체생성후, setter로 name주입

}

애플워치 -> 스마트워치로 생성자 주입되는 객체가 달라짐!
 => 자바코드의 변경없이 주입되는 객체를 변경할수있게되었다!











