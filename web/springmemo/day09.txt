호스팅
 어플리케이션은 24시간 이용가능해야한다!
 -> 프로젝트를 업로드, index★<<<
 
JSP 팀
 -> controller
    model.board
    model.member

1. *.do 요청
2. web.xml에 의해 servlet-mapping
3. 서블릿컨테이너--객체생성-->DS
4. 요청분석 => JSP 팀 프로젝트(if(action.equals("/login.do")))
5. 요청에 맞는 컨트롤러 객체를 반환 => new LoginController();
6. 5의 역할을 담당하는 HM
7. 컨트롤러 객체가 요청을 처리, 결과로 MAV객체를 반환 => ActionForward
 - VR의 등장으로 String을 반환함(경로)
 - 스프링 컨테이너의 개입으로 MAV.addObject()처리 가능해짐 -> MAV를 반환함
8. VR가 MAV에서 V(경로)정보를 추출
	=> 정보를 출력하는 페이지들을 더 안정적으로 서비스 가능해짐

Spring [.xml]
 IoC와 AOP를 지원하는 컨테이너 프레임워크
 -> 객체생성을 내가안함
  컨테이너가 new를 함
  JAVA코드에서 new가 사라짐
  결합도가 낮아짐!★
  ex) IPhone+AppleWatch
AOP -> 응집도가 높아짐!★
코드의 제 1가치
 == 유지보수
 -> 낮은결합도 + 높은응집도


AOP
 : 관점지향 프로그래밍
 -> Model
BoardDAO
 1. JDBC DB와 연결
 2. 권한 확인 -> V
 3. 비즈니스 메서드 호출하여 수행
 4. 3번 수행중에 필요한 트랜잭션
 5. 로그 출력
MemberDAO
 1. JDBC DB와 연결
 2. 권한 확인 -> V
 3. 비즈니스 메서드 호출하여 수행
 4. 3번 수행중에 필요한 트랜잭션
 5. 로그 출력

메서드, 프로세스, 로직 중심으로 코딩 == 관점지향 프로그래밍
관점 == 처리 로직
-> 컨테이너가 메서드를 결합하여 호출








